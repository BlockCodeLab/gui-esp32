esp32.menubar.device: ESP32
esp32.menubar.device.esp32: ESP32
esp32.menubar.device.esp32s3: ESP32-S3
esp32.menubar.device.esp32c3: ESP32-C3
esp32.menubar.device.esp32c6: ESP32-C6

esp32.menubar.device.sync: 同步程序
esp32.menubar.edit.classicEventsOpen: 打开经典事件积木

esp32.menubar.device.download: 通过 USB 下载程序
esp32.menubar.device.downloadBle: 通过蓝牙下载程序



esp32.blocks.classicEventsLabel: 经典事件积木请从“编辑”菜单开启。
esp32.blocks.displayMatrix: 显示 %1
esp32.blocks.clearDisplay: 清除显示
esp32.blocks.wait: 等待 %1 秒
esp32.blocks.break: 跳出重复执行
esp32.blocks.continue: 跳到下一次执行
esp32.blocks.elseif: 否则，如果 %1 那么
esp32.blocks.else: 否则
esp32.blocks.runtime: 运行时长 %1
esp32.blocks.runtimeMilliseconds: 毫秒
esp32.blocks.runtimeSeconds: 秒
esp32.blocks.data: 数据
esp32.blocks.dataConvert: 将 %1 类型转为 %2
esp32.blocks.dataLengthOf: "%1 长度"
esp32.blocks.dataConstrain: 约束 %1 在 %2 和 %3 之间
esp32.blocks.dataMap: 映射 %1 从 %2 - %3 到 %4 - %5
esp32.blocks.whensetup: 当 esp32 启动
esp32.blocks.whentimer: 当定时器每间隔 %1 毫秒
esp32.blocks.timeron: 开启定时器
esp32.blocks.timeroff: 关闭定时器
esp32.blocks.operatorLarger: "%1 和 %2 之中最大"
esp32.blocks.operatorSmaller: "%1 和 %2 之中最小"
esp32.blocks.pin: 引脚
esp32.blocks.setmode: 将引脚 %1 设为 %2 模式
esp32.blocks.inputMode: 输入
esp32.blocks.ouputMode: 输出
esp32.blocks.inputPullUpMode: 上拉输入
esp32.blocks.setdigital: 将数字引脚 %1 设为 %2
esp32.blocks.digitalHigh: 高电平
esp32.blocks.digitalLow: 低电平
esp32.blocks.setanalog: 将 PWM 引脚 %1 设为 %2
esp32.blocks.isDigitalHigh: 数字引脚 %1 是高电平？
esp32.blocks.analogValue: 模拟引脚 %1
esp32.blocks.attachinterrupt: 将引脚 %1 中断模式设为 %2
esp32.blocks.interruptRising: 电平上升
esp32.blocks.interruptFalling: 电平下降
esp32.blocks.interruptChange: 电平改变
esp32.blocks.interruptHigh: 高电平
esp32.blocks.interruptLow: 低电平
esp32.blocks.detachinterrupt: 取消引脚 %1 中断
esp32.blocks.protocols: 通讯协议
esp32.blocks.serial: 串口
esp32.blocks.serialBaudrate: 将波特率设为 %1
esp32.blocks.serialTimeout: 将超时设为 %1 毫秒
esp32.blocks.serialPrint: 用 %2 模式打印 %1
esp32.blocks.serialPrintWarp: 换行
esp32.blocks.serialPrintNoWarp: 不换行
esp32.blocks.serialPrintHEX: 16进制
esp32.blocks.serialPrintNumber: 打印 %1
esp32.blocks.serialAvailable: 存在可读取数据?
esp32.blocks.serialAvailableLength: 可读取数据长度
esp32.blocks.serialReadString: 读取文本
esp32.blocks.serialReadStringUntil: 读取文本直到 %1
esp32.blocks.serialReadParse: 读取 %1
esp32.blocks.serialReadParseInteger: 整数
esp32.blocks.serialReadParseFloat: 浮点数
esp32.blocks.serialRead: 读取 1 个字节
esp32.blocks.serialReadBytes: 读取 %1 个字节
esp32.blocks.text: 文本
esp32.blocks.textEquals: "%1 和 %2 相同（忽视大小写）？"
esp32.blocks.textRemove: 删除 %3 从第 %1 个到第 %2 个字符
esp32.blocks.textReplace: 将 %2 中的 %1 替换为 %3
esp32.blocks.textReplaceLetter: 将 %2 中的第 %1 个字符替换为 %3
esp32.blocks.textSubstring: 截取 %1 从第 %2 个到第 %3 个字符
esp32.blocks.textWith: "%1 %2 %3?"
esp32.blocks.textStartsWith: 开始于
esp32.blocks.textEndsWith: 结束于
esp32.blocks.textCase: 将 %2 字母转为 %1
esp32.blocks.textLowerCase: 小写
esp32.blocks.textUpperCase: 大写
esp32.blocks.textTrim: 清除 %1 前后空白字符
esp32.blocks.textConvert: 将 %1 转为 %2
esp32.blocks.textConvertFrom: 将 %1 转为文本



