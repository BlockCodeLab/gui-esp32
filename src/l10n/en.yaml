esp32.menubar.device: ESP32
esp32.menubar.device.esp32: ESP32
esp32.menubar.device.esp32s3: ESP32-S3
esp32.menubar.device.esp32c3: ESP32-C3
esp32.menubar.device.esp32c6: ESP32-C6
esp32.menubar.device.esp32IotBoard: ESP32 IOT Board

esp32.menubar.device.sync: Sync program

esp32.menubar.device.download: Download program via USB
esp32.menubar.device.downloadBle: Download program via Bluetooth
esp32.menubar.device.iotboardFirmware: Restore IOT Board firmware
esp32.menubar.device.firmware: Restore firmware
esp32.menubar.device.erasing: Erasing...
esp32.menubar.device.restoring: Firmware restoring...{progress}%
esp32.menubar.device.recovering: Recovering...
esp32.menubar.device.restoreDone: Firmware resotre completed! Now press RESET key
esp32.menubar.device.caching: Caching latest firmware...

esp32.extension.tags.controllers: Controllers
esp32.extension.tags.sensors: Sensors
esp32.extension.tags.actuators: Actuators
esp32.extension.tags.displays: Displays
esp32.extension.tags.modules: Modules
esp32.extension.tags.communication: Communication
esp32.extension.tags.data: Data
esp32.extension.tags.kits: Kits

esp32.blocks.wait: wait %1 milliseconds
esp32.blocks.break: break
esp32.blocks.continue: continue
esp32.blocks.elseif: else if %1 then
esp32.blocks.else: else
esp32.blocks.runtime: run time %1
esp32.blocks.runtimeMilliseconds: milliseconds
esp32.blocks.runtimeSeconds: seconds
esp32.blocks.dataConvert: convert %1 to %2
esp32.blocks.dataConvert.int: int
esp32.blocks.dataConvert.float: float
esp32.blocks.dataConvert.string: str
esp32.blocks.dataConvert.list: list
esp32.blocks.dataLengthOf: length of %1
esp32.blocks.dataConstrain: constrain %1 between %2 to %3
esp32.blocks.dataMap: map %1 from %2 - %3 to %4 - %5
esp32.blocks.whenstart: when {name} start
esp32.blocks.timerset: "set timer # %1 per %2 milliseconds"
esp32.blocks.timeroff: "stop timer # %1"
esp32.blocks.operatorLarger: larger of %1 and %2
esp32.blocks.operatorSmaller: smaller of %1 and %2
esp32.blocks.pin: Pins
esp32.blocks.setmode: set pin %1 mode to %2
esp32.blocks.inputMode: input
esp32.blocks.ouputMode: output
esp32.blocks.inputPullUpMode: input pull-up
esp32.blocks.inputPullDownMode: input pull-down
esp32.blocks.setdigital: set pin %1 to %2
esp32.blocks.digitalHigh: high
esp32.blocks.digitalLow: low
esp32.blocks.setpwmfreq: set pin %1 pwm frequency to %2 Hz
esp32.blocks.setpwm: set pin %1 pwm to %2
esp32.blocks.setanalog: set pin %1 analog to %2
esp32.blocks.isDigitalHigh: pin %1 is high?
esp32.blocks.analogValue: pin %1 analog value
esp32.blocks.attachinterrupt: attach pin %1 interrupt to %2
esp32.blocks.interruptRising: rising
esp32.blocks.interruptFalling: falling
esp32.blocks.interruptChange: change
esp32.blocks.interruptHigh: high
esp32.blocks.interruptLow: low
esp32.blocks.detachinterrupt: detach pin %1 interrupt
esp32.blocks.network: Network
esp32.blocks.protocols: Protocols
esp32.blocks.serial: Serial
esp32.blocks.serialBaudrate: set baudrate to %1
esp32.blocks.serialTimeout: set timeout to %1 milliseconds
esp32.blocks.serialPrint: print %1 with %2
esp32.blocks.serialPrintWarp: warp
esp32.blocks.serialPrintNoWarp: no-warp
esp32.blocks.serialPrintHEX: hex
esp32.blocks.serialPrintNumber: print %1
esp32.blocks.serialAvailable: available data?
esp32.blocks.serialAvailableLength: available data length
esp32.blocks.serialReadString: read a string
esp32.blocks.serialReadStringUntil: read a string until %1
esp32.blocks.serialReadParse: read a %1 number
esp32.blocks.serialReadParseInteger: int
esp32.blocks.serialReadParseFloat: float
esp32.blocks.serialRead: read a byte
esp32.blocks.serialReadBytes: read %1 bytes
esp32.blocks.text: Text
esp32.blocks.textEquals: "%1 equals %2 (not case-sensitive)?"
esp32.blocks.textRemove: remove letters from %1 to %2 of %3
esp32.blocks.textReplace: replace %1 of %2 with %3
esp32.blocks.textReplaceLetter: replace letter %1 of %2 with %3
esp32.blocks.textSubstring: substring of %1 from %2 to %3
esp32.blocks.textWith: "%1 %2 with %3?"
esp32.blocks.textStartsWith: starts
esp32.blocks.textEndsWith: ends
esp32.blocks.textCase: get %1 of %2
esp32.blocks.textLowerCase: lower-case
esp32.blocks.textUpperCase: upper-case
esp32.blocks.textTrim: remove %1 leading and trailing whitespace
esp32.blocks.textConvert: convert %1 to %2
esp32.blocks.textConvertFrom: convert %1 to String
esp32.blocks.connectWifi: "connect wi-fi ssid: %1 password: %2"
esp32.blocks.disconnectWifi: disconnect wi-fi
esp32.blocks.isWifiConnected: wi-fi is connected?
esp32.blocks.wifiScan: start scan wi-fi
esp32.blocks.wifiItem: "%2 of item %1 of available wi-fi"
esp32.blocks.wifiItemSsid: ssid
esp32.blocks.wifiItemMac: mac
esp32.blocks.wifiItemRssi: rssi
esp32.blocks.wifiItemSecurity: security
esp32.blocks.wifiCounts: available wi-fi counts
esp32.blocks.startap: "start ap ssid: %1"
esp32.blocks.stopap: stop ap
esp32.blocks.espnowSend: send esp-now message %1 to %2
esp32.blocks.espnowRecv: wait for esp-now incoming
esp32.blocks.espnowMsg: "%1 of incoming"
esp32.blocks.espnowMsgText: message
esp32.blocks.espnowMsgMac: mac
esp32.blocks.espnowRepeat: repeat wait for esp-now incoming
esp32.blocks.spiInit: initialize SPI %1 freq:%2Hz
esp32.blocks.spiHSPI: HSPI
esp32.blocks.spiVSPI: VSPI
esp32.blocks.spiWrite: SPI %1 write %2
esp32.blocks.spiRead: SPI %1 read %2 bytes
esp32.blocks.i2cInit: initialize I2C SDA:%1 SCL:%2 freq:%3Hz
esp32.blocks.i2cScan: I2C scan devices
esp32.blocks.i2cWrite: I2C write to %1:%2
esp32.blocks.i2cRead: I2C read from %1 :%2 bytes
esp32.blocks.i2sInit: initialize I2S BCK:%1 WS:%2 DATA:%3 rate:%4Hz
esp32.blocks.i2sPlay: I2S play %1
