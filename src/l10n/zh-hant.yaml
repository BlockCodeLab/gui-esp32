esp32.menubar.device: ESP32
esp32.menubar.device.esp32: ESP32
esp32.menubar.device.esp32s3: ESP32-S3
esp32.menubar.device.esp32c3: ESP32-C3
esp32.menubar.device.esp32c6: ESP32-C6

esp32.menubar.device.sync: 同步程式
esp32.menubar.edit.classicEventsOpen: 開啟舊樣式事件積木

esp32.blocks.classicEventsLabel: 经典事件積木請從「編輯」菜單開啟。
esp32.blocks.displayMatrix: 顯示圖示 %1
esp32.blocks.clearDisplay: 清空畫面
esp32.blocks.wait: 等待 %1 秒
esp32.blocks.break: 跳出重複
esp32.blocks.continue: 跳到下一次
esp32.blocks.elseif: 否則，如果 %1 那麼
esp32.blocks.else: 否則
esp32.blocks.runtime: 運行時長 %1
esp32.blocks.runtimeMilliseconds: 毫秒
esp32.blocks.runtimeSeconds: 秒
esp32.blocks.data: 數據
esp32.blocks.dataConvert: 將 %1 類型轉為 %2
esp32.blocks.dataLengthOf: "%1 長度"
esp32.blocks.dataConstrain: 約束 %1 在 %2 和 %3 之間
esp32.blocks.dataMap: 映射 %1 從 %2 - %3 到 %4 - %5
esp32.blocks.whensetup: 當 Arduino 啟動
esp32.blocks.whentimer: 當定時器每間隔 %1 秒
esp32.blocks.timeron: 開啟定時器
esp32.blocks.timeroff: 關閉定時器
esp32.blocks.operatorLarger: "%1 和 %2 之中最大"
esp32.blocks.operatorSmaller: "%1 和 %2 之中最小"
esp32.blocks.pin: 引腳
esp32.blocks.setmode: 將引腳 %1 設為 %2 模式
esp32.blocks.inputMode: 輸入
esp32.blocks.ouputMode: 輸出
esp32.blocks.inputPullUpMode: 上拉輸入
esp32.blocks.setdigital: 將數字引腳 %1 設為 %2
esp32.blocks.digitalHigh: 高電平
esp32.blocks.digitalLow: 低電平
esp32.blocks.setanalog: 將 PWM 引腳 %1 設為 %2
esp32.blocks.isDigitalHigh: 數字引腳 %1 是高電平？
esp32.blocks.analogValue: 模擬引腳 %1
esp32.blocks.attachinterrupt: 將引腳 %1 中斷模式設為 %2
esp32.blocks.interruptRising: 電平上升
esp32.blocks.interruptFalling: 電平下降
esp32.blocks.interruptChange: 電平改變
esp32.blocks.interruptHigh: 高電平
esp32.blocks.interruptLow: 低電平
esp32.blocks.detachinterrupt: 取消引腳 %1 中斷
esp32.blocks.protocols: 通訊協議
esp32.blocks.serial: 串口
esp32.blocks.serialBaudrate: 將波特率設為 %1
esp32.blocks.serialTimeout: 將超時設為 %1 毫秒
esp32.blocks.serialPrint: 用 %2 模式打印 %1
esp32.blocks.serialPrintWarp: 換行
esp32.blocks.serialPrintNoWarp: 不換行
esp32.blocks.serialPrintHEX: 16進制
esp32.blocks.serialPrintNumber: 打印 %1
esp32.blocks.serialAvailable: 存在可讀取數據?
esp32.blocks.serialAvailableLength: 可讀取數據長度
esp32.blocks.serialReadString: 讀取文本
esp32.blocks.serialReadStringUntil: 讀取文本直到 %1
esp32.blocks.serialReadParse: 讀取 %1
esp32.blocks.serialReadParseInteger: 整數
esp32.blocks.serialReadParseFloat: 浮點數
esp32.blocks.serialRead: 讀取 1 個字節
esp32.blocks.serialReadBytes: 讀取 %1 個字節
esp32.blocks.text: 文本
esp32.blocks.textEquals: "%1 和 %2 相同（忽視大小寫）？"
esp32.blocks.textRemove: 刪除 %3 從第 %1 個到第 %2 個字符
esp32.blocks.textReplace: 將 %2 中的 %1 替換為 %3
esp32.blocks.textReplaceLetter: 將 %2 中的第 %1 個字符替換為 %3
esp32.blocks.textSubstring: 截取 %1 從第 %2 個到第 %3 個字符
esp32.blocks.textWith: "%1 %2 %3?"
esp32.blocks.textStartsWith: 開始於
esp32.blocks.textEndsWith: 結束於
esp32.blocks.textCase: 將 %2 字母轉為 %1
esp32.blocks.textLowerCase: 小寫
esp32.blocks.textUpperCase: 大寫
esp32.blocks.textTrim: 清除 %1 前後空白字符
esp32.blocks.textConvert: 將 %1 轉為 %2
esp32.blocks.textConvertFrom: 將 %1 轉為文本


